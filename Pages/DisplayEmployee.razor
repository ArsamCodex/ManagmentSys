﻿@using ManagmentSys.Models;
@using ManagmentSys.Interface
<div class="card m-3" style="min-width: 18rem; max-width:30.5%;">
    <div class="card-header">

        <h3>@Employee.FirstName @Employee.LastName</h3>
        <input type="checkbox" checked="@IsSelected" @onchange="CheckBoxChanged" />
    </div>
    <img class="card-img-top imageThumbnail" src="@Employee.PhotoPath" />

    @if (ShowFooter)
    {
        <div class="card-footer text-center">
            <a href="@($"employeedetails/{Employee.EmployeeId}")"
               class="btn btn-primary m-1">View</a>

            <a href="@($"editemployee/{Employee.EmployeeId}")"
               class="btn btn-primary m-1">Edit</a>

            <button type="button" class="btn btn-danger m-1"
            @onclick="Delete_Click">
                Delete
            </button>
        </div>
    }
</div>
@code {
    [Parameter]
    public Employee Employee { get; set; }
    [Inject]
    IHttpClientFactory _clientFactory { get; set; }
    [Parameter]
    public bool ShowFooter { get; set; }

    protected bool IsSelected { get; set; }

    [Parameter]
    public EventCallback<bool> OnEmployeeSelection { get; set; }
    [Parameter]
    public EventCallback<int> OnEmployeeDeleted { get; set; }

    protected async Task CheckBoxChanged(ChangeEventArgs e)
    {
        IsSelected = (bool)e.Value;
        await OnEmployeeSelection.InvokeAsync(IsSelected);
    }
    
    [Inject]
    public IEmployeeService EmployeeService { get; set; }
    protected async Task Delete_Click()
    {

        try
        {
            var client = _clientFactory.CreateClient();
            client.BaseAddress = new Uri("https://localhost:7218/");
            var url = $"api/Employees/{Employee.EmployeeId}";

            var response = await client.DeleteAsync(url);

            if (response.IsSuccessStatusCode)
            {
                // Handle successful response
            }
            else
            {
                // Handle error response
            }
        }
        catch (Exception ex)
        {
            // Log exception to the console
            // _logger.LogError(ex, "An error occurred while processing the request.");
            // You can also handle or display the error here if needed
        }


        // EmployeeService.DeleteEmployee(Employee.EmployeeId);
        await OnEmployeeDeleted.InvokeAsync(Employee.EmployeeId);
        //NavigationManager.NavigateTo("/", true);
    }
}
