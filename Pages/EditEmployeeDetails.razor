@page "/editemployee/{id}"
@using ManagmentSys.Models;
@using ManagmentSys.Interface;

@using System;
@using System.Net.Http;
@using System.Text.Json;
@using System.Text;

<EditForm Model="@Employee" OnValidSubmit="HandleValidSubmit">
    <h3>Edit Employee</h3>
    <hr />
    <div class="form-group row">
        <label for="firstName" class="col-sm-2 col-form-label">
            First Name
        </label>
        <div class="col-sm-10">
            <InputText id="firstName" class="form-control" placeholder="First Name"
            @bind-Value="Employee.FirstName" />
            <ValidationMessage For="@(()=> Employee.FirstName)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="lastName" class="col-sm-2 col-form-label">
            Last Name
        </label>
        <div class="col-sm-10">
            <InputText id="lastName" class="form-control" placeholder="Last Name"
            @bind-Value="Employee.LastName" />
            <ValidationMessage For="@(() => Employee.LastName)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="email" class="col-sm-2 col-form-label">
            Email
        </label>
        <div class="col-sm-10">
            <InputText id="email" class="form-control" placeholder="Email"
            @bind-Value="Employee.Email" />
            <ValidationMessage For="@(() => Employee.Email)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="department" class="col-sm-2 col-form-label">
            Department
        </label>
        <div class="col-sm-10">
            <InputSelect id="department" @bind-Value="DepartmentId" class="form-control">
                @foreach (var dept in Departments)
                {
                    <option value="@dept.DepartmentId">@dept.DepartmentName</option>
                }
            </InputSelect>
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>
@code {
    [Inject]
    IHttpClientFactory _clientFactory { get; set; }

    [Inject]
    ILogger<EditEmployeeDetails> _logger { get; set; }
    public Employee Employee { get; set; } = new Employee();

    [Inject]
    public IEmployeeService EmployeeService { get; set; }

    [Inject]
    public IDepartmentRepository DepartmentService { get; set; }

    public List<Department> Departments { get; set; } = new List<Department>();

    public string DepartmentId { get; set; }

    [Parameter]
    public string Id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        Employee = await EmployeeService.GetEmployee(int.Parse(Id));
        Departments = (DepartmentService.GetDepartments()).ToList();
        DepartmentId = Employee.DepartmentId.ToString();
    }
    protected async Task HandleValidSubmit()
    {
        try
        {
            var client = _clientFactory.CreateClient();
            client.BaseAddress = new Uri("https://localhost:7218/");
            var url = "api/Employees";

            var content = new StringContent(JsonSerializer.Serialize(Employee), Encoding.UTF8, "application/json");

            var response = await client.PutAsync(url, content);

            if (response.IsSuccessStatusCode)
            {
                // Handle successful response
            }
            else
            {
                // Handle error response
            }
        }
        catch (Exception ex)
        {
            // Log exception to the console
            _logger.LogError(ex, "An error occurred while processing the request.");
            // You can also handle or display the error here if needed
        }
    }


    //await EmployeeService.UpdateEmployee(Employee);
}
